{"version":3,"file":"static/js/1541.a735ceef.chunk.js","mappings":"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","sources":["components/vactrack/VactrackAlert.js","utils/apiService.js","views/pages/resetpassword/ResetPassword.js","../node_modules/@coreui/icons/src/free/cil-lock-locked.ts"],"sourcesContent":["import React from 'react'\r\nimport { CToast, CToastBody, CToastClose } from '@coreui/react-pro';\r\n\r\nconst VactrackAlert = (text,color=\"danger\") => {    \r\n    return (\r\n        <CToast autohide={true} visible={true} color={color} className=\"text-white align-items-center\">\r\n            <div className=\"d-flex\">\r\n                <CToastBody>{text}</CToastBody>\r\n                <CToastClose className=\"me-2 m-auto\" white />\r\n            </div>\r\n        </CToast>\r\n    );\r\n}\r\n\r\nexport default VactrackAlert;","import axios from 'axios';\r\nimport authStore from 'src/stores/authStore';\r\nconst hostURL = process.env.REACT_APP_HOST_URL;\r\n\r\n\r\nconst fetchData = async (url) => {\r\n  try {\r\n    const response = await axios.get(`${hostURL}${url}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst postData = async (url,postData) => {\r\n  try {\r\n    const response = await axios.post(`${hostURL}${url}`, postData);\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchDataAuthenticated = async (url) => {\r\n  try {\r\n    const token = authStore.getToken();\r\n    const response = await axios.get(`${hostURL}${url}`,{\r\n      headers: {\r\n        \"user-token\": token,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst postDataAuthenticated = async (url, postData) => {\r\n  try {\r\n    const token = authStore.getToken();\r\n    const response = await axios.post(`${hostURL}${url}`, postData,{\r\n      headers: {\r\n        \"user-token\": token,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n    \r\n  }\r\n};\r\n\r\nexport { fetchData, postData, postDataAuthenticated, fetchDataAuthenticated };","import React, { useState,useRef } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n  CToaster\r\n} from '@coreui/react-pro'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilLockLocked } from '@coreui/icons'\r\nimport VactrackAlert  from 'src/components/vactrack/VactrackAlert';\r\nimport { postDataAuthenticated } from 'src/utils/apiService'\r\nimport authStore from 'src/stores/authStore';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ResetPassword = () => {\r\n\r\n  //Router\r\n  const navigate = useNavigate();\r\n\r\n  // States\r\n  const [toast,addToast] = useState(0);\r\n  const [validated,setValidated] = useState(false);\r\n  const toaster = useRef();\r\n  const errorToast = VactrackAlert(\"Please enter the valid data\");\r\n\r\n  const [passwordInput,setPasswordInput] = useState(\"\");\r\n  const [reTypepasswordInput,setReTypePasswordInput] = useState(\"\");\r\n\r\n  const nextPage = authStore.getNextPage();\r\n\r\n\r\n  const handleSubmit = async(event) => {\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      addToast(errorToast);\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    if(passwordInput !== reTypepasswordInput){\r\n      addToast(VactrackAlert(\"Password and Re-type password should be same\"));\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if(form.checkValidity() === true){\r\n      event.preventDefault();\r\n      const response = await postDataAuthenticated(\"/auth/reset/password\", {\r\n        \"password\":passwordInput\r\n      });\r\n      if(response.statusCode !== 200){\r\n        addToast(VactrackAlert(response.message));\r\n      }else{\r\n        authStore.login(response.token);\r\n        navigate(nextPage);\r\n      }\r\n      \r\n    }\r\n    event.preventDefault();\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\r\n      <CToaster className=\"p-3\" placement=\"top-end\" push={toast} ref={toaster} />\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md={6}>\r\n            <CCardGroup>\r\n              <CCard className=\"p-4\">\r\n                <CCardBody>\r\n                  <CForm className='needs-validation' noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <h1>Reset Password</h1>\r\n                    <p className=\"text-medium-emphasis\">Please enter a new secure password</p>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilLockLocked} />\r\n                      </CInputGroupText>\r\n                      <CFormInput\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        autoComplete=\"current-password\"\r\n                        feedbackValid=\"Looks good!\"\r\n                        feedbackInvalid=\"Password cannot be empty\"\r\n                        id='password1'\r\n                        onChange={(e) => setPasswordInput(e.target.value)}\r\n                        required\r\n                      />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilLockLocked} />\r\n                      </CInputGroupText>\r\n                      <CFormInput\r\n                        type=\"password\"\r\n                        placeholder=\"Re-Type Password\"\r\n                        autoComplete=\"current-password\"\r\n                        feedbackValid=\"Looks good!\"\r\n                        feedbackInvalid=\"Password cannot be empty\"\r\n                        id='password2'\r\n                        onChange={(e) => setReTypePasswordInput(e.target.value)}\r\n                        required\r\n                      />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs={6}>\r\n                        <CButton color=\"primary\" className=\"px-4\" type=\"submit\">\r\n                          Reset Password\r\n                        </CButton>\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPassword\r\n","export var cilLockLocked = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M384,200V144a128,128,0,0,0-256,0v56H88V328c0,92.635,75.364,168,168,168s168-75.365,168-168V200ZM160,144a96,96,0,0,1,192,0v56H160ZM392,328c0,74.99-61.01,136-136,136s-136-61.01-136-136V232H392Z' class='ci-primary'/>\"];\n"],"names":["text","color","arguments","length","undefined","_jsx","CToast","autohide","visible","className","children","_jsxs","CToastBody","CToastClose","white","hostURL","process","postData","async","url","axios","post","concat","data","error","response","status","message","postDataAuthenticated","token","authStore","getToken","headers","ResetPassword","navigate","useNavigate","toast","addToast","useState","validated","setValidated","toaster","useRef","errorToast","VactrackAlert","passwordInput","setPasswordInput","reTypepasswordInput","setReTypePasswordInput","nextPage","getNextPage","CToaster","placement","push","ref","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","noValidate","onSubmit","form","event","currentTarget","checkValidity","preventDefault","stopPropagation","statusCode","login","CInputGroup","CInputGroupText","CIcon","icon","cilLockLocked","CFormInput","type","placeholder","autoComplete","feedbackValid","feedbackInvalid","id","onChange","e","target","value","required","xs","CButton"],"sourceRoot":""}