{"version":3,"file":"static/js/8239.c3fb7b5b.chunk.js","mappings":"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","sources":["components/vactrack/VactrackAlert.js","utils/apiService.js","views/pages/forgotpassword/ForgotPassword.js","../node_modules/@coreui/icons/src/free/cil-user.ts"],"sourcesContent":["import React from 'react'\r\nimport { CToast, CToastBody, CToastClose } from '@coreui/react-pro';\r\n\r\nconst VactrackAlert = (text,color=\"danger\") => {    \r\n    return (\r\n        <CToast autohide={true} visible={true} color={color} className=\"text-white align-items-center\">\r\n            <div className=\"d-flex\">\r\n                <CToastBody>{text}</CToastBody>\r\n                <CToastClose className=\"me-2 m-auto\" white />\r\n            </div>\r\n        </CToast>\r\n    );\r\n}\r\n\r\nexport default VactrackAlert;","import axios from 'axios';\r\nimport authStore from 'src/stores/authStore';\r\nconst hostURL = process.env.REACT_APP_HOST_URL;\r\n\r\n\r\nconst fetchData = async (url) => {\r\n  try {\r\n    const response = await axios.get(`${hostURL}${url}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst postData = async (url,postData) => {\r\n  try {\r\n    const response = await axios.post(`${hostURL}${url}`, postData);\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchDataAuthenticated = async (url) => {\r\n  try {\r\n    const token = authStore.getToken();\r\n    const response = await axios.get(`${hostURL}${url}`,{\r\n      headers: {\r\n        \"user-token\": token,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst postDataAuthenticated = async (url, postData) => {\r\n  try {\r\n    const token = authStore.getToken();\r\n    const response = await axios.post(`${hostURL}${url}`, postData,{\r\n      headers: {\r\n        \"user-token\": token,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n    \r\n  }\r\n};\r\n\r\nexport { fetchData, postData, postDataAuthenticated, fetchDataAuthenticated };","import React, { useState,useRef } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardGroup,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormInput,\r\n  CInputGroup,\r\n  CInputGroupText,\r\n  CRow,\r\n  CToaster\r\n} from '@coreui/react-pro'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilUser } from '@coreui/icons'\r\nimport VactrackAlert  from 'src/components/vactrack/VactrackAlert';\r\nimport { postData } from 'src/utils/apiService'\r\nimport authStore from 'src/stores/authStore';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ForgotPassword = () => {\r\n\r\n  //Router\r\n  const navigate = useNavigate();\r\n  // States\r\n  const [toast,addToast] = useState(0);\r\n  const [validated,setValidated] = useState(false);\r\n  const toaster = useRef();\r\n  const errorToast = VactrackAlert(\"Please enter the valid email\");\r\n\r\n  const [emailInput,setEmailInput] = useState(\"\");\r\n\r\n  const handleSubmit = async(event) => {\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      addToast(errorToast);\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n    setValidated(true);\r\n    if(form.checkValidity() === true){\r\n      event.preventDefault();\r\n      const response = await postData(\"/auth/forgot/password\", {\r\n        \"email\":emailInput,\r\n      });\r\n      console.log(\"Response : \", response);\r\n\r\n      if(response){\r\n        addToast(VactrackAlert(\"OTP Sent to your email Successfully\",\"success\"));\r\n        authStore.verifyPassword(response.token);\r\n        authStore.setNextPage(\"/reset-password\");\r\n        navigate(\"/mfa\");\r\n      }\r\n    }\r\n    event.preventDefault();\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\r\n      <CToaster className=\"p-3\" placement=\"top-end\" push={toast} ref={toaster} />\r\n      <CContainer>\r\n        <CRow className=\"justify-content-center\">\r\n          <CCol md={6}>\r\n            <CCardGroup>\r\n              <CCard className=\"p-4\">\r\n                <CCardBody>\r\n                  <CForm className='needs-validation' noValidate validated={validated} onSubmit={handleSubmit}>\r\n                    <h1>Forgot Password</h1>\r\n                    <p className=\"text-medium-emphasis\">Please enter your email so that we can verify you</p>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupText>\r\n                        <CIcon icon={cilUser} />\r\n                      </CInputGroupText>\r\n                      <CFormInput \r\n                        type=\"email\" \r\n                        placeholder=\"Email\"\r\n                        autoComplete=\"email\"\r\n                        feedbackValid=\"Looks good!\"\r\n                        feedbackInvalid=\"Please enter a Valid Email\"\r\n                        id='email'\r\n                        onChange={(e) => setEmailInput(e.target.value)}\r\n                        required\r\n                      />\r\n                    </CInputGroup>\r\n                    <CRow>\r\n                      <CCol xs={6}>\r\n                        <CButton color=\"primary\" className=\"px-4\" type=\"submit\">\r\n                          Verify Me\r\n                        </CButton>\r\n                      </CCol>\r\n                      <CCol xs={6} className=\"text-right\">\r\n                        {/* <CButton color=\"link\" className=\"px-0\">\r\n                          Forgot password?\r\n                        </CButton> */}\r\n                      </CCol>\r\n                    </CRow>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n              {/* <CCard className=\"text-white bg-primary py-5\" style={{ width: '44%' }}>\r\n                <CCardBody className=\"text-center\">\r\n                  <div>\r\n                    <h2>Sign up</h2>\r\n                    <p>\r\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n                      tempor incididunt ut labore et dolore magna aliqua.\r\n                    </p>\r\n                    <Link to=\"/register\">\r\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>\r\n                        Register Now!\r\n                      </CButton>\r\n                    </Link>\r\n                  </div>\r\n                </CCardBody>\r\n              </CCard> */}\r\n            </CCardGroup>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ForgotPassword\r\n","export var cilUser = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M411.6,343.656l-72.823-47.334,27.455-50.334A80.23,80.23,0,0,0,376,207.681V128a112,112,0,0,0-224,0v79.681a80.236,80.236,0,0,0,9.768,38.308l27.455,50.333L116.4,343.656A79.725,79.725,0,0,0,80,410.732V496H448V410.732A79.727,79.727,0,0,0,411.6,343.656ZM416,464H112V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479-41.64-76.341A48.146,48.146,0,0,1,184,207.681V128a80,80,0,0,1,160,0v79.681a48.146,48.146,0,0,1-5.861,22.985L296.5,307.007l97.662,63.479h0A47.836,47.836,0,0,1,416,410.732Z' class='ci-primary'/>\"];\n"],"names":["text","color","arguments","length","undefined","_jsx","CToast","autohide","visible","className","children","_jsxs","CToastBody","CToastClose","white","hostURL","process","postData","async","url","axios","post","concat","data","error","response","status","message","postDataAuthenticated","token","authStore","getToken","headers","ForgotPassword","navigate","useNavigate","toast","addToast","useState","validated","setValidated","toaster","useRef","errorToast","VactrackAlert","emailInput","setEmailInput","CToaster","placement","push","ref","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","noValidate","onSubmit","form","event","currentTarget","checkValidity","preventDefault","stopPropagation","console","log","verifyPassword","setNextPage","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","type","placeholder","autoComplete","feedbackValid","feedbackInvalid","id","onChange","e","target","value","required","xs","CButton"],"sourceRoot":""}