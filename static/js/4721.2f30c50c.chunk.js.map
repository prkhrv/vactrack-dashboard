{"version":3,"file":"static/js/4721.2f30c50c.chunk.js","mappings":"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","sources":["components/vactrack/VactrackAlert.js","utils/apiService.js","views/pages/login/Login.js","../node_modules/@coreui/icons/src/free/cil-lock-locked.ts","../node_modules/@coreui/icons/src/free/cil-user.ts"],"sourcesContent":["import React from 'react'\r\nimport { CToast, CToastBody, CToastClose } from '@coreui/react-pro';\r\n\r\nconst VactrackAlert = (text,color=\"danger\") => {    \r\n    return (\r\n        <CToast autohide={true} visible={true} color={color} className=\"text-white align-items-center\">\r\n            <div className=\"d-flex\">\r\n                <CToastBody>{text}</CToastBody>\r\n                <CToastClose className=\"me-2 m-auto\" white />\r\n            </div>\r\n        </CToast>\r\n    );\r\n}\r\n\r\nexport default VactrackAlert;","import axios from 'axios';\r\nimport authStore from 'src/stores/authStore';\r\nconst hostURL = process.env.REACT_APP_HOST_URL;\r\n\r\n\r\nconst fetchData = async (url) => {\r\n  try {\r\n    const response = await axios.get(`${hostURL}${url}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst postData = async (url,postData) => {\r\n  try {\r\n    const response = await axios.post(`${hostURL}${url}`, postData);\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchDataAuthenticated = async (url) => {\r\n  try {\r\n    const token = authStore.getToken();\r\n    const response = await axios.get(`${hostURL}${url}`,{\r\n      headers: {\r\n        \"user-token\": token,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n  }\r\n};\r\n\r\nconst postDataAuthenticated = async (url, postData) => {\r\n  try {\r\n    const token = authStore.getToken();\r\n    const response = await axios.post(`${hostURL}${url}`, postData,{\r\n      headers: {\r\n        \"user-token\": token,\r\n      }\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    if(error.response.status === 401){\r\n      return {\"statusCode\":401,\"message\":\"You are not authorized to send this request\"};\r\n    }else if(error.response.status === 403){\r\n      return {\"statusCode\":403,\"message\":\"The credentials you have provided are invalid\"};\r\n    }\r\n    else{\r\n      return {\"statusCode\":400,\"message\":error.response.data.message};\r\n    }\r\n    \r\n  }\r\n};\r\n\r\nexport { fetchData, postData, postDataAuthenticated, fetchDataAuthenticated };","import React, { useState,useRef } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n  CToaster\n} from '@coreui/react-pro'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport VactrackAlert  from 'src/components/vactrack/VactrackAlert';\nimport { postData } from 'src/utils/apiService'\nimport authStore from 'src/stores/authStore';\nimport { useNavigate } from 'react-router-dom';\n\nconst Login = () => {\n\n  //Router\n  const navigate = useNavigate();\n\n  // States\n  const [toast,addToast] = useState(0);\n  const [validated,setValidated] = useState(false);\n  const toaster = useRef();\n  const errorToast = VactrackAlert(\"Please enter the valid data\");\n\n  const [emailInput,setEmailInput] = useState(\"\");\n  const [passwordInput,setPasswordInput] = useState(\"\");\n\n  const handleSubmit = async(event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      addToast(errorToast);\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    setValidated(true);\n    if(form.checkValidity() === true){\n      event.preventDefault();\n      const response = await postData(\"/auth/login\", {\n        \"email\":emailInput,\n        \"password\":passwordInput\n      });\n      \n      if(response.statusCode !== 200){\n        addToast(VactrackAlert(response.message));\n      }else{\n        authStore.verifyPassword(response.token);\n        authStore.setNextPage(\"/\");\n        navigate(\"/mfa\");\n      }\n      \n    }\n    event.preventDefault();\n  }\n  \n\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CToaster className=\"p-3\" placement=\"top-end\" push={toast} ref={toaster} />\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={6}>\n            <CCardGroup>\n              <CCard className=\"p-4\">\n                <CCardBody>\n                  <CForm className='needs-validation' noValidate validated={validated} onSubmit={handleSubmit}>\n                    <h1>Login</h1>\n                    <p className=\"text-medium-emphasis\">Sign In to your account</p>\n                    <CInputGroup className=\"mb-3\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <CFormInput \n                        type=\"email\" \n                        placeholder=\"Email\"\n                        autoComplete=\"email\"\n                        feedbackValid=\"Looks good!\"\n                        feedbackInvalid=\"Please enter a Valid Email\"\n                        id='email'\n                        onChange={(e) => setEmailInput(e.target.value)}\n                        required\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        autoComplete=\"current-password\"\n                        feedbackValid=\"Looks good!\"\n                        feedbackInvalid=\"Password cannot be empty\"\n                        id='password'\n                        onChange={(e) => setPasswordInput(e.target.value)}\n                        required\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol xs={6}>\n                        <CButton color=\"primary\" className=\"px-4\" type=\"submit\">\n                          Login\n                        </CButton>\n                      </CCol>\n                      <CCol xs={6} className=\"text-right\">\n                        <CButton color=\"link\" className=\"px-0\" onClick={() => navigate('/forgotpassword')}>\n                          Forgot password?\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n              {/* <CCard className=\"text-white bg-primary py-5\" style={{ width: '44%' }}>\n                <CCardBody className=\"text-center\">\n                  <div>\n                    <h2>Sign up</h2>\n                    <p>\n                      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                      tempor incididunt ut labore et dolore magna aliqua.\n                    </p>\n                    <Link to=\"/register\">\n                      <CButton color=\"primary\" className=\"mt-3\" active tabIndex={-1}>\n                        Register Now!\n                      </CButton>\n                    </Link>\n                  </div>\n                </CCardBody>\n              </CCard> */}\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n","export var cilLockLocked = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M384,200V144a128,128,0,0,0-256,0v56H88V328c0,92.635,75.364,168,168,168s168-75.365,168-168V200ZM160,144a96,96,0,0,1,192,0v56H160ZM392,328c0,74.99-61.01,136-136,136s-136-61.01-136-136V232H392Z' class='ci-primary'/>\"];\n","export var cilUser = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M411.6,343.656l-72.823-47.334,27.455-50.334A80.23,80.23,0,0,0,376,207.681V128a112,112,0,0,0-224,0v79.681a80.236,80.236,0,0,0,9.768,38.308l27.455,50.333L116.4,343.656A79.725,79.725,0,0,0,80,410.732V496H448V410.732A79.727,79.727,0,0,0,411.6,343.656ZM416,464H112V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479-41.64-76.341A48.146,48.146,0,0,1,184,207.681V128a80,80,0,0,1,160,0v79.681a48.146,48.146,0,0,1-5.861,22.985L296.5,307.007l97.662,63.479h0A47.836,47.836,0,0,1,416,410.732Z' class='ci-primary'/>\"];\n"],"names":["text","color","arguments","length","undefined","_jsx","CToast","autohide","visible","className","children","_jsxs","CToastBody","CToastClose","white","hostURL","process","postData","async","url","axios","post","concat","data","error","response","status","message","postDataAuthenticated","token","authStore","getToken","headers","Login","navigate","useNavigate","toast","addToast","useState","validated","setValidated","toaster","useRef","errorToast","VactrackAlert","emailInput","setEmailInput","passwordInput","setPasswordInput","CToaster","placement","push","ref","CContainer","CRow","CCol","md","CCardGroup","CCard","CCardBody","CForm","noValidate","onSubmit","form","event","currentTarget","checkValidity","preventDefault","stopPropagation","statusCode","verifyPassword","setNextPage","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","type","placeholder","autoComplete","feedbackValid","feedbackInvalid","id","onChange","e","target","value","required","cilLockLocked","xs","CButton","onClick"],"sourceRoot":""}