{"version":3,"file":"static/js/1339.f9a7d2a0.chunk.js","mappings":"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","sources":["views/permissions/PermissionTable.js","views/groups/AddGroup.js","views/groups/Groups.js","../node_modules/@coreui/icons/src/free/cil-plus.ts"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { CTable,CTableHead, CTableBody, CTableRow, CTableHeaderCell, CTableDataCell  } from \"@coreui/react-pro\";\r\n\r\n\r\n\r\nconst PermissionTable = ({ id,permissionsData,setUpdatedPermissions }) =>{\r\n\r\n    const [permissions, setPermissions] = useState(permissionsData);\r\n\r\n    const handleCheckboxChange = (permissionName, columnName) => {\r\n        const updatedPermissions = permissions.map(permission => {\r\n          if (permission.name === permissionName) {\r\n            if(columnName === 'read'){\r\n              return { ...permission, [columnName]: !permission[columnName], create: false, edit: false, delete: false, view_all:false,modify_all:false };\r\n            }\r\n            return { ...permission, [columnName]: !permission[columnName] };\r\n          }\r\n          return permission;\r\n        });\r\n        setPermissions(updatedPermissions);\r\n        setUpdatedPermissions(id,updatedPermissions)\r\n      };    \r\n\r\n      return (\r\n        <CTable bordered borderColor=\"dark\" striped>\r\n          <CTableHead>\r\n            <CTableRow>\r\n              <CTableHeaderCell scope=\"col\">Module</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Read</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Create</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Edit</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Delete</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">View All</CTableHeaderCell>\r\n              <CTableHeaderCell scope=\"col\">Modify All</CTableHeaderCell>\r\n            </CTableRow>\r\n          </CTableHead>\r\n          <CTableBody>\r\n            {permissions.map(permission => (\r\n              <CTableRow key={permission.name}>\r\n                <CTableDataCell>{permission.name}</CTableDataCell>\r\n                <CTableDataCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={permission.read}\r\n                    onChange={() => handleCheckboxChange(permission.name, 'read')}\r\n                  />\r\n                </CTableDataCell>\r\n                <CTableDataCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={permission.create}\r\n                    onChange={() => handleCheckboxChange(permission.name, 'create')}\r\n                  />\r\n                </CTableDataCell>\r\n                <CTableDataCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={permission.edit}\r\n                    onChange={() => handleCheckboxChange(permission.name, 'edit')}\r\n                  />\r\n                </CTableDataCell>\r\n                <CTableDataCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={permission.delete}\r\n                    onChange={() => handleCheckboxChange(permission.name, 'delete')}\r\n                  />\r\n                </CTableDataCell>\r\n                <CTableDataCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={permission.view_all}\r\n                    onChange={() => handleCheckboxChange(permission.name, 'view_all')}\r\n                  />\r\n                </CTableDataCell>\r\n                <CTableDataCell>\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={permission.modify_all}\r\n                    onChange={() => handleCheckboxChange(permission.name, 'modify_all')}\r\n                  />\r\n                </CTableDataCell>\r\n              </CTableRow>\r\n            ))}\r\n          </CTableBody>\r\n        </CTable>\r\n      );\r\n}\r\n\r\nexport default PermissionTable;","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n  CForm,\r\n  CInputGroup,\r\n  CFormSelect,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CInputGroupText\r\n} from '@coreui/react-pro';\r\nimport { toast } from 'react-toastify';\r\nimport { postDataAuthenticated } from 'src/utils/apiService';\r\n\r\nconst AddGroupModal = ({ show, handleClose }) => {\r\n    const [loading,setLoading] = useState(false);\r\n    const [groupName, setGroupName] = useState('');\r\n    const [isNameValid,setNameValid] = useState(false);\r\n\r\n  const handleUserNameChange = (event) => {\r\n    setGroupName(event.target.value);\r\n    validateName(event.target.value);\r\n  };\r\n\r\n  const validateName = (name) => {\r\n    if (/^[a-zA-Z\\s]{3,}$/.test(name)) {\r\n      setNameValid(true);\r\n    } else {\r\n        setNameValid(false);\r\n    //   setError('Name must contain only letters and have at least 5 characters.');\r\n    }\r\n  };\r\n\r\n\r\n  const handleAddGroup = async(event) => {\r\n    // Implement functionality to add user here\r\n    if(!isNameValid){\r\n        toast.error(\"Please fill all the fields correctly\");\r\n        return;\r\n    }else{\r\n        const data = {\r\n            name:groupName,\r\n        };\r\n        const response = await postDataAuthenticated(\"/groups\",data);\r\n        console.log(response);\r\n        if(response.statusCode !== 201){\r\n            toast.error(\"Cannot Add Group\");\r\n        }else{\r\n            toast.success(\"Group Added Successfully\");\r\n            handleClose(true); // Close the modal after adding user\r\n        }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CModal\r\n      visible={show}\r\n      onClose={() => handleClose()}\r\n      aria-labelledby=\"AddGroupModal\"\r\n      size='lg'\r\n    >\r\n      <CModalHeader closeButton>\r\n        <CModalTitle>Add Group</CModalTitle>\r\n      </CModalHeader>\r\n      <CModalBody>\r\n        <CForm>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Name</CInputGroupText>\r\n                <CFormInput id=\"groupName\" placeholder=\"Enter name\" value={groupName} valid={isNameValid} invalid={!isNameValid} onChange={handleUserNameChange} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please enter a valid name\" required/>\r\n            </CInputGroup>\r\n        </CForm>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        <CButton color=\"secondary\" onClick={handleClose}>Close</CButton>\r\n        <CButton color=\"primary\" onClick={handleAddGroup}>Add Group</CButton>\r\n      </CModalFooter>\r\n    </CModal>\r\n  );\r\n};\r\n\r\nexport default AddGroupModal;\r\n","import PropTypes from 'prop-types'\r\nimport React, { useEffect, useState, createRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { CRow, CCol, CCard, CCardHeader,CBadge,CButton,CCollapse, CCardBody,CAvatar,CSmartTable } from '@coreui/react-pro'\r\nimport { rgbToHex } from '@coreui/utils'\r\nimport { postDataAuthenticated } from 'src/utils/apiService'\r\nimport PermissionTable from '../permissions/PermissionTable'\r\nimport { toast } from 'react-toastify';\r\nimport permissionStore from 'src/stores/permissionStore'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilGroup, cilObjectGroup, cilPlus } from '@coreui/icons'\r\nimport AddGroupModal from './AddGroup'\r\n\r\n\r\n// const ThemeView = () => {\r\n//   const [color, setColor] = useState('rgb(255, 255, 255)')\r\n//   const ref = createRef()\r\n\r\n//   useEffect(() => {\r\n//     const el = ref.current.parentNode.firstChild\r\n//     const varColor = window.getComputedStyle(el).getPropertyValue('background-color')\r\n//     setColor(varColor)\r\n//   }, [ref])\r\n\r\n//   return (\r\n//     <table className=\"table w-100\" ref={ref}>\r\n//       <tbody>\r\n//         <tr>\r\n//           <td className=\"text-medium-emphasis\">HEX:</td>\r\n//           <td className=\"font-weight-bold\">{rgbToHex(color)}</td>\r\n//         </tr>\r\n//         <tr>\r\n//           <td className=\"text-medium-emphasis\">RGB:</td>\r\n//           <td className=\"font-weight-bold\">{color}</td>\r\n//         </tr>\r\n//       </tbody>\r\n//     </table>\r\n//   )\r\n// }\r\n\r\n// const ThemeColor = ({ className, children }) => {\r\n//   const classes = classNames(className, 'theme-color w-75 rounded mb-3')\r\n//   return (\r\n//     <CCol xs={12} sm={6} md={4} xl={2} className=\"mb-4\">\r\n//       <div className={classes} style={{ paddingTop: '75%' }}></div>\r\n//       {children}\r\n//       <ThemeView />\r\n//     </CCol>\r\n//   )\r\n// }\r\n\r\n// ThemeColor.propTypes = {\r\n//   children: PropTypes.node,\r\n//   className: PropTypes.string,\r\n// }\r\n\r\nconst Groups = () => {\r\n    const [details, setDetails] = useState([]);\r\n    // const [groupPermissions,setGroupPermissions] = useState([]);\r\n    const [loading,setLoading] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [groups,setGroups] = useState([]);\r\n    const permissions = permissionStore.getPermissions();\r\n    const groupPermission = permissions.find(permission => permission.name === 'Groups');\r\n    const canCreateGroups = groupPermission ? groupPermission.create : false;\r\n\r\n    const formatDate = (dateString) => {\r\n        const options = { year: \"numeric\", month: \"long\", day: \"numeric\"}\r\n        return new Date(dateString).toLocaleDateString(undefined, options)\r\n    }\r\n\r\n    const handleCloseModal = (created = false) => {\r\n        if(created){\r\n            fetchGroups().then(groups => {\r\n                setGroups(groups);\r\n                setLoading(false);\r\n            });\r\n        }\r\n        setShowModal(false);\r\n\r\n      };\r\n    \r\n      const handleShowModal = (value) => {\r\n        setShowModal(value);\r\n      };\r\n    \r\n    const columns = [\r\n        {\r\n            key: 'sr',\r\n            label: '#',\r\n            filter: false,\r\n            sorter: false,\r\n            _style: { width: '1%' }\r\n        },\r\n        {\r\n            key: 'name',\r\n            _style: { width: '20%' },\r\n        },\r\n        {\r\n            label:'Created Date',\r\n            key: 'created_date',\r\n            _style: { width: '20%' },\r\n        },\r\n        {\r\n            key: 'show_details',\r\n            label: '',\r\n            _style: { width: '1%' },\r\n            filter: false,\r\n            sorter: false,\r\n        },\r\n    ]\r\n\r\n    async function fetchGroups(){\r\n        setLoading(true);\r\n        const response = await postDataAuthenticated(\"/groups/fetch\");\r\n        if(response.statusCode !== 200){\r\n            return [];\r\n        }else{\r\n            \r\n            return response.data;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchGroups().then(groups => {\r\n            setGroups(groups);\r\n            setLoading(false);\r\n        });\r\n    },[])\r\n\r\n    const savePermissions = async(id,permissions) => {\r\n        console.log(id, permissions);\r\n        const response = await postDataAuthenticated(\"/permissions/edit\",{\r\n            id: `${id}`,\r\n            modules: permissions,\r\n        });\r\n        if(response.statusCode !== 200){\r\n            toast.error('Error saving permissions');\r\n        }else{\r\n            toast.success('Permissions saved successfully');\r\n        }\r\n    }\r\n\r\n    const setUpdatedPermissions = (id, permissions) => {\r\n        setGroups(groups =>{\r\n            const updatedGroups = groups.map(group => {\r\n                if(group.permissions[0]._id == id){\r\n                    return {...group, permissions:[{\r\n                        ...group.permissions[0],\r\n                        modules: permissions\r\n                    }]};\r\n                }\r\n                return group;\r\n            });\r\n            return updatedGroups;\r\n        });\r\n    };\r\n// const usersData = [\r\n//   {\r\n//     id: 1,\r\n//     name: 'Samppa Nori',\r\n//     email: 'samppa.nori@example.com',\r\n//     avatar: '1.jpg',\r\n//     registered: '2022/01/01',\r\n//     group: 'Admin',\r\n//     status: 'Active',\r\n//   },\r\n// ]\r\nconst getBadge = (status) => {\r\n    if(status){\r\n        return 'success'\r\n    }\r\n    return 'danger'\r\n}\r\n\r\n\r\nconst toggleDetails = (index) => { \r\n  const position = details.indexOf(index)\r\n  let newDetails = details.slice()\r\n  if (position !== -1) {\r\n    newDetails.splice(position, 1)\r\n  } else {\r\n    newDetails = [...details, index]\r\n  }\r\n  setDetails(newDetails)\r\n}\r\nreturn (\r\n    <div>\r\n    <AddGroupModal show={showModal} handleClose={handleCloseModal} />\r\n    <CCard className=\"mb\">\r\n        <CCardBody>\r\n            <CRow>\r\n                <CCol sm={5}>\r\n                    <div>\r\n                        <h5><strong>Groups</strong></h5>\r\n                    </div>\r\n                    {/* <div className=\"small text-medium-emphasis\">\r\n                        List of users\r\n                    </div> */}\r\n                </CCol>\r\n                <CCol sm={7} className=\"d-none d-md-block\">\r\n                    {/* <CButton color=\"primary\" className=\"float-end\">\r\n                        <i className=\"fas fa-download\" />\r\n                        Import\r\n                    </CButton> */}\r\n                    {\r\n                        canCreateGroups && (<CButton color=\"primary\" className=\"float-end\" style={{marginRight: '10px'}} onClick={() =>  handleShowModal(!showModal)}>\r\n                             <CIcon icon={cilPlus} className=\"text-light\"/>\r\n                             <span style={{ marginLeft: '5px', color:'white' }}>Add Group</span>\r\n                            </CButton>)\r\n                    }\r\n                </CCol>\r\n            </CRow>\r\n            <CSmartTable\r\n            activePage={1}\r\n            cleaner\r\n            clickableRows\r\n            columns={columns}\r\n            columnFilter\r\n            columnSorter\r\n            // footer\r\n            loading={loading}\r\n            items={groups}\r\n            itemsPerPageSelect\r\n            itemsPerPage={10}\r\n            pagination\r\n            onFilteredItemsChange={(items) => {\r\n                console.log(items)\r\n            }}\r\n            onSelectedItemsChange={(items) => {\r\n                console.log(items)\r\n            }}\r\n            scopedColumns={{\r\n                sr: (item, index) => (\r\n                    <td>\r\n                        {index + 1}\r\n                    </td>\r\n                ),\r\n                created_date : (item) => (\r\n                    <td>\r\n                        {formatDate(item.created_date)}\r\n                    </td>\r\n                ),\r\n                avatar: (item) => (\r\n                    <td>\r\n                    <CAvatar src={`/images/avatars/${item.avatar}`} />\r\n                    </td>\r\n                ),\r\n            is_active: (item) => (\r\n                <td>\r\n                <h5><CBadge color={getBadge(item.is_active)}>{item.is_active ? 'Active': 'Inactive'}</CBadge></h5>\r\n                </td>\r\n            ),\r\n            show_details: (item) => {\r\n                return (\r\n                <td className=\"py-2\">\r\n                <CButton\r\n                    color=\"primary\"\r\n                    variant=\"outline\"\r\n                    shape=\"square\"\r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                        toggleDetails(item._id)\r\n                    }}>\r\n                {details.includes(item._id) ? 'Hide' : 'Permissions'}\r\n                </CButton>\r\n                </td>\r\n            )\r\n        },\r\n        details: (item,index) => {\r\n        return (\r\n          <CCollapse visible={details.includes(item._id)}>\r\n            <CCardBody className=\"p-3\">\r\n              <p className=\"text-muted\">Permissions:</p>\r\n              <PermissionTable id={item.permissions[0]._id} permissionsData={item.permissions[0].modules} setUpdatedPermissions={setUpdatedPermissions}/>\r\n\r\n              <div className=\"mt-3 d-flex justify-content-start\">\r\n              <CButton size=\"sm\" color=\"info\" onClick={() => savePermissions(item.permissions[0]._id,item.permissions[0].modules)}>\r\n                Save\r\n              </CButton>\r\n              </div>\r\n            </CCardBody>\r\n          </CCollapse>\r\n        )\r\n      },\r\n    }}\r\n    sorterValue={{ column: 'status', state: 'asc' }}\r\n    tableFilter\r\n    tableProps={{\r\n      className: 'add-this-class',\r\n      responsive: true,\r\n      striped: true,\r\n      hover: true,\r\n    }}\r\n    tableBodyProps={{\r\n      className: 'align-middle'\r\n    }}\r\n  />\r\n    </CCardBody>\r\n    </CCard>\r\n    </div>   \r\n);\r\n\r\n}\r\n\r\nexport default Groups\r\n","export var cilPlus = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='440 240 272 240 272 72 240 72 240 240 72 240 72 272 240 272 240 440 272 440 272 272 440 272 440 240' class='ci-primary'/>\"];\n"],"names":["_ref","id","permissionsData","setUpdatedPermissions","permissions","setPermissions","useState","handleCheckboxChange","permissionName","columnName","updatedPermissions","map","permission","name","create","edit","delete","view_all","modify_all","_jsxs","CTable","bordered","borderColor","striped","children","_jsx","CTableHead","CTableRow","CTableHeaderCell","scope","CTableBody","CTableDataCell","type","checked","read","onChange","show","handleClose","loading","setLoading","groupName","setGroupName","isNameValid","setNameValid","validateName","test","CModal","visible","onClose","size","CModalHeader","closeButton","CModalTitle","CModalBody","CForm","CInputGroup","className","CInputGroupText","CFormInput","placeholder","value","valid","invalid","event","target","feedbackValid","feedbackInvalid","required","CModalFooter","CButton","color","onClick","async","data","response","postDataAuthenticated","console","log","statusCode","toast","error","success","Groups","details","setDetails","showModal","setShowModal","groups","setGroups","groupPermission","permissionStore","getPermissions","find","canCreateGroups","fetchGroups","useEffect","then","group","_id","modules","AddGroupModal","arguments","length","undefined","CCard","CCardBody","CRow","CCol","sm","style","marginRight","CIcon","icon","cilPlus","marginLeft","CSmartTable","activePage","cleaner","clickableRows","columns","key","label","filter","sorter","_style","width","columnFilter","columnSorter","items","itemsPerPageSelect","itemsPerPage","pagination","onFilteredItemsChange","onSelectedItemsChange","scopedColumns","sr","item","index","created_date","dateString","Date","toLocaleDateString","year","month","day","avatar","CAvatar","src","concat","is_active","CBadge","status","show_details","variant","shape","position","indexOf","newDetails","slice","splice","toggleDetails","includes","CCollapse","PermissionTable","savePermissions","sorterValue","column","state","tableFilter","tableProps","responsive","hover","tableBodyProps"],"sourceRoot":""}