{"version":3,"file":"static/js/7272.7e4e4f7b.chunk.js","mappings":"kTAkBA,MAoKA,EApKqBA,IAA4B,IAA3B,KAAEC,EAAI,YAAEC,GAAaF,EACvC,MAAOG,EAAQC,IAAcC,EAAAA,EAAAA,WAAS,IAC/BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAYC,IAAgBJ,EAAAA,EAAAA,WAAS,IACrCK,EAAaC,IAAiBN,EAAAA,EAAAA,WAAS,IACvCO,EAAgBC,IAAoBR,EAAAA,EAAAA,WAAS,IAC7CS,EAAaC,IAAiBV,EAAAA,EAAAA,WAAS,IAGvCW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,KAC5Ca,EAAUC,IAAed,EAAAA,EAAAA,UAAS,KAClCe,EAAOC,IAAYhB,EAAAA,EAAAA,UAAS,KAC5BiB,EAAQC,IAAclB,EAAAA,EAAAA,UAAS,KAsBtCmB,EAAAA,EAAAA,YAAU,KAZZC,iBACErB,GAAW,GACX,MAAMsB,QAAiBC,EAAAA,EAAAA,IAAsB,iBAC7C,OAA2B,MAAxBD,EAASE,YACRxB,GAAW,GACXyB,EAAAA,GAAMC,MAAM,qBACL,KAEP1B,GAAW,GACJsB,EAASK,KACnB,CAGGC,GAAcC,MAAKC,IArBCA,KACxB,IAAIC,EAAO,GACXD,EAAOE,SAAQC,IACXF,EAAKG,MAAKC,EAAAA,EAAAA,KAAA,UAAQC,MAAOH,EAAMI,IAAIC,SAAEL,EAAMM,OAAe,IAE9DpB,EAAWY,EAAK,EAiBRS,CAAiBV,EAAO,IAErB,KACH9B,GAAW,EAAM,IAEvB,IAGJ,MAKMyC,EAAgBF,IAChB,mBAAmBG,KAAKH,GAC1BlC,GAAa,GAEXA,GAAa,EAEjB,EAQIsC,EAAiB3B,IACF,6BACJ0B,KAAK1B,GAClBT,GAAc,GAEZA,GAAc,EAClB,EAQIqC,EAAoB9B,IACF,kFACJ4B,KAAK5B,GACrBL,GAAiB,GAEhBA,GAAiB,EACpB,EAQIoC,EAAiBZ,IAEnBtB,EADW,KAAVsB,EAIH,EA2BF,OACEa,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACLC,QAASnD,EACToD,QAASA,IAAMnD,IACf,kBAAgB,eAChBoD,KAAK,KAAIZ,SAAA,EAETH,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACC,aAAW,EAAAd,UACvBH,EAAAA,EAAAA,KAACkB,EAAAA,GAAW,CAAAf,SAAC,gBAEfH,EAAAA,EAAAA,KAACmB,EAAAA,GAAU,CAAAhB,UACTQ,EAAAA,EAAAA,MAACS,EAAAA,GAAK,CAAAjB,SAAA,EACFQ,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,WAChDQ,EAAAA,EAAAA,MAACc,EAAAA,GAAW,CAACC,QAAM,EAACF,GAAG,QAAQvB,MAAOxB,EAAekD,SAnDxCC,IACzBlD,EAAiBkD,EAAMC,OAAO5B,OAC9BS,EAAckB,EAAMC,OAAO5B,MAAM,EAiD6D6B,MAAOvD,EAAcwD,SAAUxD,EAAcyD,cAAc,cAAcC,gBAAgB,wBAAuB9B,SAAA,EAClMH,EAAAA,EAAAA,KAAA,UAAQC,MAAM,GAAEE,SAAC,iBAChBpB,SAGL4B,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,UAChDH,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAACV,GAAG,WAAWW,YAAY,aAAalC,MAAOlC,EAAU+D,MAAO7D,EAAa8D,SAAU9D,EAAa0D,SApG/FC,IAC5B5D,EAAY4D,EAAMC,OAAO5B,OACzBK,EAAasB,EAAMC,OAAO5B,MAAM,EAkG2H+B,cAAc,cAAcC,gBAAgB,4BAA4BG,UAAQ,QAEnOzB,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,WAChDH,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAACG,KAAK,QAAQb,GAAG,QAAQW,YAAY,cAAclC,MAAOpB,EAAOiD,MAAO3D,EAAc4D,SAAU5D,EAAcwD,SA1F5GC,IACzB9C,EAAS8C,EAAMC,OAAO5B,OACtBO,EAAcoB,EAAMC,OAAO5B,MAAM,EAwFiI+B,cAAc,cAAcC,gBAAgB,6BAA6BG,UAAQ,EAACE,aAAa,cAEzP3B,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,cAChDH,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAACG,KAAK,WAAWb,GAAG,WAAWW,YAAY,0BAA0BlC,MAAOtB,EAAUgD,SAhFjFC,IAC5BhD,EAAYgD,EAAMC,OAAO5B,OACzBQ,EAAiBmB,EAAMC,OAAO5B,MAAM,EA8EyG6B,MAAOzD,EAAiB0D,SAAU1D,EAAiB2D,cAAc,cAAcC,gBAAgB,4IAA4IG,UAAQ,EAACE,aAAa,sBAI5Y3B,EAAAA,EAAAA,MAAC4B,EAAAA,GAAY,CAAApC,SAAA,EACXH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACC,MAAM,YAAYC,QAAS/E,EAAYwC,SAAC,WACjDH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACC,MAAM,UAAUC,QA3DTxD,UAEpB,GAAIjB,GAAgBE,GAAiBE,GAAoBE,EAGpD,CACD,MAAMiB,EAAO,CACTY,KAAKrC,EACLc,MAAMA,EACNF,SAASA,EACTmB,MAAMrB,GAEJU,QAAiBC,EAAAA,EAAAA,IAAsB,qBAAqBI,GACvC,MAAxBL,EAASE,YAA8C,MAAxBF,EAASE,WACvCC,EAAAA,GAAMC,MAAM,mBACiB,MAAxBJ,EAASE,WACdC,EAAAA,GAAMC,MAAM,qDAEZD,EAAAA,GAAMqD,QAAQ,2BACdhF,GAAY,GAEpB,MAlBI2B,EAAAA,GAAMC,MAAM,uCAkBhB,EAsCoDY,SAAC,kBAE5C,EC3Ib,EAvB4B1C,IAAgD,IAA/C,MAAEmF,EAAK,KAAClF,EAAI,YAAEC,EAAW,cAACkF,GAAepF,EAEpE,OACEkD,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACLC,QAASnD,EACToD,QAASA,IAAMnD,IACf,kBAAgB,eAChBoD,KAAK,KAAIZ,SAAA,EAETH,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACC,aAAW,EAAAd,UACvBH,EAAAA,EAAAA,KAACkB,EAAAA,GAAW,CAAAf,SAAEyC,OAEhB5C,EAAAA,EAAAA,KAACmB,EAAAA,GAAU,CAAAhB,UACTH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,uEAELQ,EAAAA,EAAAA,MAAC4B,EAAAA,GAAY,CAAApC,SAAA,EACXH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACC,MAAM,YAAYC,QAAS/E,EAAYwC,SAAC,YACjDH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACC,MAAM,UAAUC,QAASG,EAAc1C,SAAC,iBAE5C,ECuLb,EAvMsB1C,IAAkC,IAAjC,KAAEC,EAAI,YAAEC,EAAW,KAAEmF,GAAMrF,EAC9C,MAAOG,EAAQC,IAAcC,EAAAA,EAAAA,WAAS,IAC/BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAYC,IAAgBJ,EAAAA,EAAAA,WAAS,IACrCK,EAAaC,IAAiBN,EAAAA,EAAAA,WAAS,IACvCO,EAAgBC,IAAoBR,EAAAA,EAAAA,WAAS,IAC7CS,EAAaC,IAAiBV,EAAAA,EAAAA,WAAS,IAGvCW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,KAC5Ca,EAAUC,IAAed,EAAAA,EAAAA,UAAS,KAClCe,EAAOC,IAAYhB,EAAAA,EAAAA,UAAS,KAC5BiB,EAAQC,IAAclB,EAAAA,EAAAA,UAAS,KAC/BiF,EAASC,IAAelF,EAAAA,EAAAA,WAAS,IAmCxCmB,EAAAA,EAAAA,YAAU,KACR,GAAGvB,EAOD,OApBNwB,iBACErB,GAAW,GACX,MAAMsB,QAAiBC,EAAAA,EAAAA,IAAsB,iBAC7C,OAA2B,MAAxBD,EAASE,YACRxB,GAAW,GACXyB,EAAAA,GAAMC,MAAM,qBACL,KAEP1B,GAAW,GACJsB,EAASK,KACnB,CAIGC,GAAcC,MAAKC,IAnCCA,KACxB,IAAIC,EAAO,GACXD,EAAOE,SAAQC,IACXF,EAAKG,MAAKC,EAAAA,EAAAA,KAAA,UAAQC,MAAOH,EAAMI,IAAIC,SAAEL,EAAMM,OAAe,IAE9DpB,EAAWY,EAAK,EA+BVS,CAAiBV,EAAO,IA3B3BmD,EAAKhD,QACNmD,QAAQC,IAAI,iBACZlF,EAAY8E,EAAK1C,MACjBtB,EAASgE,EAAKjE,OACdH,EAAiBoE,EAAKhD,MAAMI,KAC5B8C,EAAYF,EAAKK,WACjB7C,EAAawC,EAAK1C,MAClBI,EAAcsC,EAAKjE,OACnB6B,EAAcoC,EAAKhD,MAAMI,MAwBhB,KACLrC,GAAW,EAAM,CAErB,GACA,CAACH,IAGL,MAKM4C,EAAgBF,IAChB,mBAAmBG,KAAKH,GAC1BlC,GAAa,GAEXA,GAAa,EAEjB,EAQIsC,EAAiB3B,IACF,6BACJ0B,KAAK1B,GAClBT,GAAc,GAEZA,GAAc,EAClB,EAsBIsC,EAAiBZ,IAEnBtB,EADW,KAAVsB,EAIH,EAoCF,OACEa,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CACLC,QAASnD,EACToD,QAASA,IAAMnD,IACf,kBAAgB,gBAChBoD,KAAK,KAAIZ,SAAA,EAETH,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CAACC,aAAW,EAAAd,UACvBH,EAAAA,EAAAA,KAACkB,EAAAA,GAAW,CAAAf,SAAC,iBAEfH,EAAAA,EAAAA,KAACmB,EAAAA,GAAU,CAAAhB,UACTQ,EAAAA,EAAAA,MAACS,EAAAA,GAAK,CAAAjB,SAAA,EACFQ,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,WAChDQ,EAAAA,EAAAA,MAACc,EAAAA,GAAW,CAACC,QAAM,EAACF,GAAG,QAAQvB,MAAOxB,EAAekD,SA5DxCC,IACzBlD,EAAiBkD,EAAMC,OAAO5B,OAC9BS,EAAckB,EAAMC,OAAO5B,MAAM,EA0D6D6B,MAAOvD,EAAcwD,SAAUxD,EAAcyD,cAAc,cAAcC,gBAAgB,wBAAuB9B,SAAA,EAClMH,EAAAA,EAAAA,KAAA,UAAQC,MAAM,GAAEE,SAAC,iBAChBpB,SAGL4B,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,UAChDH,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAACV,GAAG,WAAWW,YAAY,aAAalC,MAAOlC,EAAU+D,MAAO7D,EAAa8D,SAAU9D,EAAa0D,SA7G/FC,IAC5B5D,EAAY4D,EAAMC,OAAO5B,OACzBK,EAAasB,EAAMC,OAAO5B,MAAM,EA2G2H+B,cAAc,cAAcC,gBAAgB,4BAA4BG,UAAQ,QAEnOzB,EAAAA,EAAAA,MAACU,EAAAA,GAAW,CAACC,UAAU,OAAMnB,SAAA,EACzBH,EAAAA,EAAAA,KAACuB,EAAAA,GAAe,CAACC,GAAG,4BAA2BrB,SAAC,WAChDH,EAAAA,EAAAA,KAACkC,EAAAA,GAAU,CAACG,KAAK,QAAQb,GAAG,QAAQW,YAAY,cAAclC,MAAOpB,EAAOiD,MAAO3D,EAAc4D,SAAU5D,EAAcwD,SAnG5GC,IACzB9C,EAAS8C,EAAMC,OAAO5B,OACtBO,EAAcoB,EAAMC,OAAO5B,MAAM,EAiGiI+B,cAAc,cAAcC,gBAAgB,6BAA6BG,UAAQ,EAACE,aAAa,cAMzPtC,EAAAA,EAAAA,KAACqB,EAAAA,GAAW,CAACC,UAAU,OAAMnB,UAEzBQ,EAAAA,EAAAA,MAAA,OAAKyC,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUnD,SAAA,EACrDH,EAAAA,EAAAA,KAAA,KAAAG,SAAG,eACHH,EAAAA,EAAAA,KAACuD,EAAAA,GAAW,CAACH,MAAO,CAACI,WAAW,QAAShC,GAAG,YAAYpB,KAAK,YAAYqD,MAAM,GAAGC,QAASX,EAAUpB,SApEvFC,IAC1BoB,EAAYpB,EAAMC,OAAO6B,QAAQ,EAmE6GC,SAAO,eAKnJhD,EAAAA,EAAAA,MAAC4B,EAAAA,GAAY,CAAApC,SAAA,EACXH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACC,MAAM,YAAYC,QAAS/E,EAAYwC,SAAC,WACjDH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACC,MAAM,UAAUC,QAvERxD,UAErB,GAAIjB,GAAgBE,GAAiBI,EAGhC,CACD,MAAMiB,EAAO,CACTgC,GAAGsB,EAAK5C,IACRV,KAAK,CACHY,KAAKrC,EACLc,MAAMA,EACNiB,MAAMrB,EACN0E,UAAUJ,IAIV5D,QAAiBC,EAAAA,EAAAA,IAAsB,kCAAkCI,GAC/EyD,QAAQC,IAAI/D,GACe,MAAxBA,EAASE,YAA8C,MAAxBF,EAASE,WACvCC,EAAAA,GAAMC,MAAM,oBACiB,MAAxBJ,EAASE,WACdC,EAAAA,GAAMC,MAAM,qDAEZD,EAAAA,GAAMqD,QAAQ,+BACdhF,GAAY,GAEpB,MAvBI2B,EAAAA,GAAMC,MAAM,uCAuBhB,EA6CqDY,SAAC,mBAE7C,EC+Ib,EA5ScyD,KACV,MAAOC,EAASC,IAAchG,EAAAA,EAAAA,UAAS,KAChCF,EAAQC,IAAcC,EAAAA,EAAAA,WAAS,IAC/BiG,EAAWC,IAAgBlG,EAAAA,EAAAA,WAAS,IACpCmG,EAAkBC,IAAuBpG,EAAAA,EAAAA,WAAS,IAClDqG,EAAeC,IAAoBtG,EAAAA,EAAAA,WAAS,IAE5CuG,EAAMC,IAAYxG,EAAAA,EAAAA,UAAS,KAC3ByG,EAAaC,IAAmB1G,EAAAA,EAAAA,UAAS,SACzC2G,EAASC,IAAe5G,EAAAA,EAAAA,UAAS,CAAC,GAEnC6G,EADcC,EAAAA,EAAgBC,iBACAC,MAAKC,GAAkC,UAApBA,EAAW3E,OAC5D4E,IAAiBL,GAAkBA,EAAgBM,OAyCnDC,EAAyBA,CAACjF,EAAMuB,KAClCgD,EAAgBhD,GAChB0C,EAAoBjE,EAAM,EAgE9Bf,eAAeiG,IACXtH,GAAW,GACX,MAAMsB,QAAiBC,EAAAA,EAAAA,IAAsB,4BAC7C,OAA2B,MAAxBD,EAASE,YACRC,EAAAA,GAAMC,MAAM,qBACL,IAEAJ,EAASK,IAExB,EAEAP,EAAAA,EAAAA,YAAU,KACNkG,IAAazF,MAAK2E,IACdC,EAASD,GACTxG,GAAW,EAAM,GACnB,GACJ,IA0CN,OACI8C,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACAH,EAAAA,EAAAA,KAACoF,EAAY,CAAC1H,KAAMqG,EAAWpG,YA/JN,WAAQ0H,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAEzBF,IAAazF,MAAK2E,IACdC,EAASD,GACTxG,GAAW,EAAM,IAGzBmG,GAAa,EAEjB,KAuJAhE,EAAAA,EAAAA,KAACwF,EAAmB,CAAC5C,MAAM,iBAAiBlF,KAAMuG,EAAkBpB,cAAeA,IA1HnF3D,iBACI+D,QAAQC,IAAI,eAADuC,OAAgBlB,IAC3B1G,GAAW,GACX,MAAM2B,EAAO,CACTgC,GAAI+C,GAGFpF,QAAiBC,EAAAA,EAAAA,IAAsB,oCAAoCI,GACtD,MAAxBL,EAASE,YACRC,EAAAA,GAAMqD,QAAQ,mCACRwC,IAAazF,MAAK2E,IACpBC,EAASD,GACTxG,GAAW,EAAM,MAGrBA,GAAW,GACgB,MAAxBsB,EAASE,WACRC,EAAAA,GAAMC,MAAM,oDAEZD,EAAAA,GAAMC,MAAM,uBAIpB2E,GAAoB,EACxB,CAkGyFwB,GAAoB/H,YAAaA,IAAMuH,GAAuB,EAAM,WAC7JlF,EAAAA,EAAAA,KAAC2F,EAAa,CAACjI,KAAMyG,EAAexG,YAhJP,WAAO0H,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAE5BF,IAAazF,MAAK2E,IACdC,EAASD,GACTxG,GAAW,EAAM,IAGzB6G,EAAY,CAAC,GACbN,GAAiB,EACrB,EAuIuEtB,KAAM2B,KAC7EzE,EAAAA,EAAAA,KAAC4F,EAAAA,GAAK,CAACtE,UAAU,KAAInB,UACjBQ,EAAAA,EAAAA,MAACkF,EAAAA,GAAS,CAAA1F,SAAA,EACNQ,EAAAA,EAAAA,MAACmF,EAAAA,GAAI,CAAA3F,SAAA,EACDH,EAAAA,EAAAA,KAAC+F,EAAAA,GAAI,CAACC,GAAI,EAAE7F,UACRH,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,MAAAG,UAAIH,EAAAA,EAAAA,KAAA,UAAAG,SAAQ,iBAMpBH,EAAAA,EAAAA,KAAC+F,EAAAA,GAAI,CAACC,GAAI,EAAG1E,UAAU,oBAAmBnB,SAMlC6E,IAAmBrE,EAAAA,EAAAA,MAAC6B,EAAAA,GAAO,CAACC,MAAM,UAAUnB,UAAU,YAAY8B,MAAO,CAAC6C,YAAa,QAASvD,QAASA,KAtJzHsB,GAsJgJD,EAAW,EAAA5D,SAAA,EACtIH,EAAAA,EAAAA,KAACkG,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAAa9E,UAAU,gBACpCtB,EAAAA,EAAAA,KAAA,QAAMoD,MAAO,CAAEI,WAAY,MAAOf,MAAM,SAAUtC,SAAC,sBAKxEH,EAAAA,EAAAA,KAACqG,EAAAA,GAAW,CACRC,WAAY,EACZC,SAAO,EACPC,eAAa,EACbC,QA9HQ,CACZ,CACIC,IAAK,KACLjD,MAAO,IACPkD,QAAQ,EACRC,QAAQ,EACRC,OAAQ,CAAEC,MAAO,OAErB,CACIJ,IAAK,OACLG,OAAQ,CAAEC,MAAO,QAErB,CACIJ,IAAK,QACLG,OAAQ,CAAEC,MAAO,QAErB,CACIJ,IAAK,QACLjD,MAAO,QACPoD,OAAQ,CAAEC,MAAO,QAErB,CACIrD,MAAO,SACPiD,IAAK,YACTG,OAAQ,CAAEC,MAAO,QAEjB,CACIJ,IAAK,eACLjD,MAAO,GACPoD,OAAQ,CAAEC,MAAO,MACjBH,QAAQ,EACRC,QAAQ,IAgGRG,cAAY,EACZC,cAAY,EAEZpJ,QAASA,EACTqJ,MAAO5C,EACP6C,oBAAkB,EAClBC,aAAc,GACdC,YAAU,EACVC,sBAAwBJ,IACpBhE,QAAQC,IAAI+D,EAAM,EAEtBK,sBAAwBL,IACpBhE,QAAQC,IAAI+D,EAAM,EAEtBM,cAAe,CACXC,GAAIA,CAACC,EAAMC,KACP1H,EAAAA,EAAAA,KAAA,MAAAG,SACKuH,EAAQ,IAQjB5H,MAAQ2H,IACJzH,EAAAA,EAAAA,KAAA,MAAAG,UACIH,EAAAA,EAAAA,KAAA,KAAAG,SAAIsH,EAAK3H,MAAMM,SAG3B+C,UAAYsE,IACRzH,SAAAA,EAAAA,KAAA,MAAAG,UACAH,EAAAA,EAAAA,KAAA,MAAAG,UAAIH,EAAAA,EAAAA,KAAC2H,EAAAA,GAAM,CAAClF,OAhGVmF,EAgG0BH,EAAKtE,UA/F1CyE,EACQ,UAEJ,UA4FiDzH,SAAEsH,EAAKtE,UAAY,SAAU,iBAhGvEyE,KAkGL,EACDC,aAAeJ,IAEXzH,EAAAA,EAAAA,KAAA,MAAIsB,UAAU,OAAMnB,UACpBH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CACJC,MAAM,UACNqF,QAAQ,UACRC,MAAM,SACNhH,KAAK,KACL2B,QAASA,KAzFNgF,KACrB,MAAMM,EAAWnE,EAAQoE,QAAQP,GACjC,IAAIQ,EAAarE,EAAQsE,SACP,IAAdH,EACFE,EAAWE,OAAOJ,EAAU,GAE5BE,EAAa,IAAIrE,EAAS6D,GAE5B5D,EAAWoE,EAAW,EAkFAG,CAAcZ,EAAKvH,IAAI,EACzBC,SACL0D,EAAQyE,SAASb,EAAKvH,KAAO,OAAS,WAK/C2D,QAAU4D,IACV,OACEzH,EAAAA,EAAAA,KAACuI,EAAAA,GAAS,CAAC1H,QAASgD,EAAQyE,SAASb,EAAKvH,KAAKC,UAC7CQ,EAAAA,EAAAA,MAACkF,EAAAA,GAAS,CAACvE,UAAU,MAAKnB,SAAA,EAExBQ,EAAAA,EAAAA,MAAA,KAAGW,UAAU,aAAYnB,SAAA,CAAC,gBA5PhBqI,EA4PwCf,EAAKgB,aA1PtD,IAAIC,KAAKF,GAAYG,wBAAmBpD,EAD/B,CAAEqD,KAAM,UAAWC,MAAO,OAAQC,IAAK,iBA8PjD9I,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACzB,KAAK,KAAK0B,MAAM,OAAOW,MAAO,CAAC6C,YAAY,QAASvD,QAASA,KAAMqG,OA9OxD9I,GA8O8EkE,EA7OxGO,EA6OsH+C,QA5OtHrD,EAAiBnE,GAFQ8I,IAAC9I,CA8OkG,EAAAE,SAAC,kBAIvHH,EAAAA,EAAAA,KAACwC,EAAAA,GAAO,CAACzB,KAAK,KAAK0B,MAAM,SAASnB,UAAU,OAAOoB,QAASA,IAAMwC,GAAwBjB,EAAiBwD,EAAKvH,KAAKC,SAAC,gBAnQ5GqI,KAuQF,GAIlBQ,YAAa,CAAEC,OAAQ,SAAUC,MAAO,OACxCC,aAAW,EACXC,WAAY,CACV9H,UAAW,iBACX+H,YAAY,EACZC,SAAS,EACTC,OAAO,GAETC,eAAgB,CACdlI,UAAW,yBAIP,C,mCChWA,IAAC8E,EAAc,CAAC,UAAW,4rB","sources":["views/users/CreateUser.js","components/vactrack/VactrackConfirmationModal.js","views/users/EditUser.js","views/users/Users.js","../node_modules/@coreui/icons/src/free/cil-user-plus.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n  CForm,\r\n  CInputGroup,\r\n  CFormSelect,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CInputGroupText\r\n} from '@coreui/react-pro';\r\nimport { toast } from 'react-toastify';\r\nimport { postDataAuthenticated } from 'src/utils/apiService';\r\n\r\nconst AddUserModal = ({ show, handleClose }) => {\r\n    const [loading,setLoading] = useState(false);\r\n    const [userName, setUserName] = useState('');\r\n    const [isNameValid,setNameValid] = useState(false);\r\n    const [isEmailValid,setEmailValid] = useState(false);\r\n    const [isPasswordValid,setPasswordValid] = useState(false);\r\n    const [isGroupValid,setGroupValid] = useState(false);\r\n\r\n\r\n    const [selectedGroup, setSelectedGroup] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [options,setOptions] = useState([]);\r\n\r\n  const configureOptions = (groups) => {\r\n    var opts = [];\r\n    groups.forEach(group => {\r\n        opts.push(<option value={group._id}>{group.name}</option>)\r\n    })\r\n    setOptions(opts);\r\n  }\r\n\r\n  async function fetchGroups(){\r\n    setLoading(true);\r\n    const response = await postDataAuthenticated(\"/groups/fetch\");\r\n    if(response.statusCode !== 200){\r\n        setLoading(false);\r\n        toast.error(\"Cannot Fetch Data\");\r\n        return [];\r\n    }else{\r\n        setLoading(false);\r\n        return response.data;\r\n    }}\r\n\r\n    useEffect(() => {\r\n        fetchGroups().then(groups => {\r\n            configureOptions(groups);\r\n        });\r\n        return () => {\r\n            setLoading(false);\r\n        } \r\n    },[]);\r\n\r\n\r\n  const handleUserNameChange = (event) => {\r\n    setUserName(event.target.value);\r\n    validateName(event.target.value);\r\n  };\r\n\r\n  const validateName = (name) => {\r\n    if (/^[a-zA-Z\\s]{5,}$/.test(name)) {\r\n      setNameValid(true);\r\n    } else {\r\n        setNameValid(false);\r\n    //   setError('Name must contain only letters and have at least 5 characters.');\r\n    }\r\n  };\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n    validateEmail(event.target.value);\r\n  }\r\n\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (emailRegex.test(email)) {\r\n      setEmailValid(true);\r\n    } else {\r\n        setEmailValid(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n    validatePassword(event.target.value);\r\n  }\r\n\r\n  const validatePassword = (password) => {\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]{12,}$/;\r\n    if (passwordRegex.test(password)) {\r\n      setPasswordValid(true);\r\n    } else {\r\n       setPasswordValid(false);\r\n    }\r\n  };\r\n\r\n  const handleGroupChange = (event) => {\r\n    setSelectedGroup(event.target.value);\r\n    validateGroup(event.target.value);\r\n  };\r\n\r\n  const validateGroup = (group) =>{\r\n    if(group !== \"\"){\r\n      setGroupValid(true);\r\n    }else{\r\n      setGroupValid(false);\r\n    }\r\n  }\r\n\r\n  const handleAddUser = async(event) => {\r\n    // Implement functionality to add user here\r\n    if(!isNameValid || !isEmailValid || !isPasswordValid || !isGroupValid){\r\n        toast.error(\"Please fill all the fields correctly\");\r\n        return;\r\n    }else{\r\n        const data = {\r\n            name:userName,\r\n            email:email,\r\n            password:password,\r\n            group:selectedGroup\r\n        };\r\n        const response = await postDataAuthenticated(\"/university-admins\",data);\r\n        if(response.statusCode !== 201 && response.statusCode !== 403){\r\n            toast.error(\"Cannot Add User\");\r\n        }else if(response.statusCode === 403){\r\n            toast.error(\"You don't have permission to perform this action\");\r\n        }else{\r\n            toast.success(\"User Added Successfully\");\r\n            handleClose(true); // Close the modal after adding user\r\n        }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CModal\r\n      visible={show}\r\n      onClose={() => handleClose()}\r\n      aria-labelledby=\"AddUserModal\"\r\n      size='lg'\r\n    >\r\n      <CModalHeader closeButton>\r\n        <CModalTitle>Add User</CModalTitle>\r\n      </CModalHeader>\r\n      <CModalBody>\r\n        <CForm>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Group</CInputGroupText>\r\n                <CFormSelect custom id=\"group\" value={selectedGroup} onChange={handleGroupChange} valid={isGroupValid} invalid={!isGroupValid} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please select a group\">\r\n                <option value=\"\">Select Group</option>\r\n                {options}\r\n            </CFormSelect>\r\n            </CInputGroup>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Name</CInputGroupText>\r\n                <CFormInput id=\"userName\" placeholder=\"Enter name\" value={userName} valid={isNameValid} invalid={!isNameValid} onChange={handleUserNameChange} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please enter a valid name\" required/>\r\n            </CInputGroup>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Email</CInputGroupText>\r\n                <CFormInput type='email' id=\"email\" placeholder=\"Enter email\" value={email} valid={isEmailValid} invalid={!isEmailValid} onChange={handleEmailChange} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please enter a valid email\" required autoComplete=\"email\"/>\r\n            </CInputGroup>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Password</CInputGroupText>\r\n                <CFormInput type='password' id=\"password\" placeholder=\"Enter a secure password\" value={password} onChange={handlePasswordChange} valid={isPasswordValid} invalid={!isPasswordValid} feedbackValid=\"Looks good!\" feedbackInvalid=\"Password must be at least 12 characters long and contain at least one lowercase letter, one uppercase letter, one number, and one symbol.\" required autoComplete=\"password\"/>\r\n            </CInputGroup>\r\n        </CForm>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        <CButton color=\"secondary\" onClick={handleClose}>Close</CButton>\r\n        <CButton color=\"primary\" onClick={handleAddUser}>Add User</CButton>\r\n      </CModalFooter>\r\n    </CModal>\r\n  );\r\n};\r\n\r\nexport default AddUserModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n  CForm,\r\n  CInputGroup,\r\n  CFormSelect,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CInputGroupText\r\n} from '@coreui/react-pro';\r\n\r\nconst ConfirmRequestModal = ({ title,show, handleClose,handleConfirm }) => {\r\n\r\n  return (\r\n    <CModal\r\n      visible={show}\r\n      onClose={() => handleClose()}\r\n      aria-labelledby=\"AddUserModal\"\r\n      size='lg'\r\n    >\r\n      <CModalHeader closeButton>\r\n        <CModalTitle>{title}</CModalTitle>\r\n      </CModalHeader>\r\n      <CModalBody>\r\n        <p>Are you sure you want to proceed? This action cannot be undone.</p>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        <CButton color=\"secondary\" onClick={handleClose}>Cancel</CButton>\r\n        <CButton color=\"primary\" onClick={handleConfirm}>Confirm</CButton>\r\n      </CModalFooter>\r\n    </CModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmRequestModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n  CModal,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CButton,\r\n  CForm,\r\n  CInputGroup,\r\n  CFormSelect,\r\n  CFormLabel,\r\n  CFormInput,\r\n  CInputGroupText,\r\n  CFormSwitch\r\n} from '@coreui/react-pro';\r\nimport { toast } from 'react-toastify';\r\nimport { postDataAuthenticated } from 'src/utils/apiService';\r\n\r\nconst EditUserModal = ({ show, handleClose, user }) => {\r\n    const [loading,setLoading] = useState(false);\r\n    const [userName, setUserName] = useState('');\r\n    const [isNameValid,setNameValid] = useState(false);\r\n    const [isEmailValid,setEmailValid] = useState(false);\r\n    const [isPasswordValid,setPasswordValid] = useState(false);\r\n    const [isGroupValid,setGroupValid] = useState(false);\r\n\r\n\r\n    const [selectedGroup, setSelectedGroup] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [options,setOptions] = useState([]);\r\n    const [isActive,setIsActive] = useState(false);\r\n\r\n  const configureOptions = (groups) => {\r\n    var opts = [];\r\n    groups.forEach(group => {\r\n        opts.push(<option value={group._id}>{group.name}</option>)\r\n    })\r\n    setOptions(opts);\r\n  }\r\n\r\n  function setUserData(){\r\n    if(user.group){\r\n      console.log(\"Set User data\");\r\n      setUserName(user.name);\r\n      setEmail(user.email);\r\n      setSelectedGroup(user.group._id);\r\n      setIsActive(user.is_active)\r\n      validateName(user.name);\r\n      validateEmail(user.email);\r\n      validateGroup(user.group._id);\r\n    }\r\n  }\r\n\r\n  async function fetchGroups(){\r\n    setLoading(true);\r\n    const response = await postDataAuthenticated(\"/groups/fetch\");\r\n    if(response.statusCode !== 200){\r\n        setLoading(false);\r\n        toast.error(\"Cannot Fetch Data\");\r\n        return [];\r\n    }else{\r\n        setLoading(false);\r\n        return response.data;\r\n    }}\r\n\r\n    useEffect(() => {\r\n      if(show){\r\n        fetchGroups().then(groups => {\r\n          configureOptions(groups);\r\n        });\r\n\r\n        setUserData();\r\n        \r\n        return () => {\r\n          setLoading(false);\r\n        } \r\n      }\r\n    },[show]);\r\n\r\n\r\n  const handleUserNameChange = (event) => {\r\n    setUserName(event.target.value);\r\n    validateName(event.target.value);\r\n  };\r\n\r\n  const validateName = (name) => {\r\n    if (/^[a-zA-Z\\s]{5,}$/.test(name)) {\r\n      setNameValid(true);\r\n    } else {\r\n        setNameValid(false);\r\n    //   setError('Name must contain only letters and have at least 5 characters.');\r\n    }\r\n  };\r\n\r\n  const handleEmailChange = (event) => {\r\n    setEmail(event.target.value);\r\n    validateEmail(event.target.value);\r\n  }\r\n\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (emailRegex.test(email)) {\r\n      setEmailValid(true);\r\n    } else {\r\n        setEmailValid(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n    validatePassword(event.target.value);\r\n  }\r\n\r\n  const validatePassword = (password) => {\r\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]{12,}$/;\r\n    if (passwordRegex.test(password)) {\r\n      setPasswordValid(true);\r\n    } else {\r\n       setPasswordValid(false);\r\n    }\r\n  };\r\n\r\n  const handleGroupChange = (event) => {\r\n    setSelectedGroup(event.target.value);\r\n    validateGroup(event.target.value);\r\n  };\r\n\r\n  const validateGroup = (group) =>{\r\n    if(group !== \"\"){\r\n      setGroupValid(true);\r\n    }else{\r\n      setGroupValid(false);\r\n    }\r\n  }\r\n\r\n  const handleActiveChange = (event) => {\r\n    setIsActive(event.target.checked);\r\n  }\r\n\r\n  const handleEditUser = async(event) => {\r\n    // Implement functionality to add user here\r\n    if(!isNameValid || !isEmailValid || !isGroupValid){\r\n        toast.error(\"Please fill all the fields correctly\");\r\n        return;\r\n    }else{\r\n        const data = {\r\n            id:user._id,\r\n            data:{\r\n              name:userName,\r\n              email:email,\r\n              group:selectedGroup,\r\n              is_active:isActive\r\n            }\r\n        };\r\n\r\n        const response = await postDataAuthenticated(\"/university-admins/profile/edit\",data);\r\n        console.log(response);\r\n        if(response.statusCode !== 200 && response.statusCode !== 403){\r\n            toast.error(\"Cannot Edit User\");\r\n        }else if(response.statusCode === 403){\r\n            toast.error(\"You don't have permission to perform this action\");\r\n        }else{\r\n            toast.success(\"Profile Edited Successfully\");\r\n            handleClose(true); // Close the modal after adding user\r\n        }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CModal\r\n      visible={show}\r\n      onClose={() => handleClose()}\r\n      aria-labelledby=\"EditUserModal\"\r\n      size='lg'\r\n    >\r\n      <CModalHeader closeButton>\r\n        <CModalTitle>Edit User</CModalTitle>\r\n      </CModalHeader>\r\n      <CModalBody>\r\n        <CForm>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Group</CInputGroupText>\r\n                <CFormSelect custom id=\"group\" value={selectedGroup} onChange={handleGroupChange} valid={isGroupValid} invalid={!isGroupValid} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please select a group\">\r\n                <option value=\"\">Select Group</option>\r\n                {options}\r\n            </CFormSelect>\r\n            </CInputGroup>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Name</CInputGroupText>\r\n                <CFormInput id=\"userName\" placeholder=\"Enter name\" value={userName} valid={isNameValid} invalid={!isNameValid} onChange={handleUserNameChange} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please enter a valid name\" required/>\r\n            </CInputGroup>\r\n            <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Email</CInputGroupText>\r\n                <CFormInput type='email' id=\"email\" placeholder=\"Enter email\" value={email} valid={isEmailValid} invalid={!isEmailValid} onChange={handleEmailChange} feedbackValid=\"Looks good!\" feedbackInvalid=\"Please enter a valid email\" required autoComplete=\"email\"/>\r\n            </CInputGroup>\r\n            {/* <CInputGroup className='mb-3'>\r\n                <CInputGroupText id=\"inputGroup-sizing-default\">Password</CInputGroupText>\r\n                <CFormInput type='password' id=\"password\" placeholder=\"Enter a secure password\" value={password} onChange={handlePasswordChange} valid={isPasswordValid} invalid={!isPasswordValid} feedbackValid=\"Looks good!\" feedbackInvalid=\"Password must be at least 12 characters long and contain at least one lowercase letter, one uppercase letter, one number, and one symbol.\" required autoComplete=\"password\"/>\r\n            </CInputGroup> */}\r\n            <CInputGroup className='mb-3'>\r\n                {/* <CInputGroupText id=\"inputGroup-sizing-default\">Is Active</CInputGroupText> */}\r\n                <div style={{ display: 'flex', alignItems: 'start' }}>\r\n                <p>Is active</p>\r\n                <CFormSwitch style={{marginLeft:'10px'}} id=\"is_active\" name='is_active' label=\"\" checked={isActive} onChange={handleActiveChange}reverse/>\r\n                </div>\r\n            </CInputGroup>\r\n        </CForm>\r\n      </CModalBody>\r\n      <CModalFooter>\r\n        <CButton color=\"secondary\" onClick={handleClose}>Close</CButton>\r\n        <CButton color=\"primary\" onClick={handleEditUser}>Edit User</CButton>\r\n      </CModalFooter>\r\n    </CModal>\r\n  );\r\n};\r\n\r\nexport default EditUserModal;\r\n","import PropTypes from 'prop-types'\r\nimport React, { useEffect, useState, createRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport { CRow, CCol, CCard, CCardHeader,CBadge,CButton,CCollapse, CCardBody,CAvatar,CSmartTable,CModal,CModalHeader,CModalTitle,CModalBody,CModalFooter } from '@coreui/react-pro'\r\nimport { rgbToHex } from '@coreui/utils'\r\nimport { postDataAuthenticated } from 'src/utils/apiService'\r\nimport VactrackAlert from 'src/components/vactrack/VactrackAlert'\r\nimport { toast } from 'react-toastify';\r\nimport permissionStore from 'src/stores/permissionStore'\r\nimport CIcon from '@coreui/icons-react'\r\nimport { cilUser, cilUserPlus } from '@coreui/icons'\r\nimport AddUserModal from './CreateUser'\r\nimport ConfirmRequestModal from 'src/components/vactrack/VactrackConfirmationModal'\r\nimport EditUserModal from './EditUser'\r\n\r\n// const ThemeView = () => {\r\n//   const [color, setColor] = useState('rgb(255, 255, 255)')\r\n//   const ref = createRef()\r\n\r\n//   useEffect(() => {\r\n//     const el = ref.current.parentNode.firstChild\r\n//     const varColor = window.getComputedStyle(el).getPropertyValue('background-color')\r\n//     setColor(varColor)\r\n//   }, [ref])\r\n\r\n//   return (\r\n//     <table className=\"table w-100\" ref={ref}>\r\n//       <tbody>\r\n//         <tr>\r\n//           <td className=\"text-medium-emphasis\">HEX:</td>\r\n//           <td className=\"font-weight-bold\">{rgbToHex(color)}</td>\r\n//         </tr>\r\n//         <tr>\r\n//           <td className=\"text-medium-emphasis\">RGB:</td>\r\n//           <td className=\"font-weight-bold\">{color}</td>\r\n//         </tr>\r\n//       </tbody>\r\n//     </table>\r\n//   )\r\n// }\r\n\r\n// const ThemeColor = ({ className, children }) => {\r\n//   const classes = classNames(className, 'theme-color w-75 rounded mb-3')\r\n//   return (\r\n//     <CCol xs={12} sm={6} md={4} xl={2} className=\"mb-4\">\r\n//       <div className={classes} style={{ paddingTop: '75%' }}></div>\r\n//       {children}\r\n//       <ThemeView />\r\n//     </CCol>\r\n//   )\r\n// }\r\n\r\n// ThemeColor.propTypes = {\r\n//   children: PropTypes.node,\r\n//   className: PropTypes.string,\r\n// }\r\n\r\nconst Users = () => {\r\n    const [details, setDetails] = useState([])\r\n    const [loading,setLoading] = useState(false);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [showRequestModal, setShowRequestModal] = useState(false);\r\n    const [showEditModal, setShowEditModal] = useState(false);\r\n\r\n    const [users,setUsers] = useState([]);\r\n    const [userToDelete,setUserToDelete] = useState(\"null\");\r\n    const [editUser,setEditUser] = useState({});\r\n    const permissions = permissionStore.getPermissions();\r\n    const usersPermission = permissions.find(permission => permission.name === 'Users');\r\n    const canCreateUsers = usersPermission ? usersPermission.create : false;\r\n\r\n\r\n    const formatDate = (dateString) => {\r\n        const options = { year: \"numeric\", month: \"long\", day: \"numeric\"}\r\n        return new Date(dateString).toLocaleDateString(undefined, options)\r\n    }\r\n\r\n    const handleCloseModal = (created = false) => {\r\n        if(created){\r\n            fetchUsers().then(users => {\r\n                setUsers(users);\r\n                setLoading(false);\r\n            });\r\n        }\r\n        setShowModal(false);\r\n\r\n    };\r\n\r\n\r\n    const showEditRequestModal = (value,user) =>{\r\n        setEditUser(user);\r\n        setShowEditModal(value);\r\n    }\r\n\r\n    const handleCloseEditModal = (edited = false) =>{\r\n        if(edited){\r\n            fetchUsers().then(users => {\r\n                setUsers(users);\r\n                setLoading(false);\r\n            });\r\n        }\r\n        setEditUser({});\r\n        setShowEditModal(false);\r\n    }\r\n    \r\n    const handleShowModal = (value) => {\r\n        setShowModal(value);\r\n    };\r\n\r\n\r\n    const handleShowRequestModal = (value,id) => {\r\n        setUserToDelete(id);\r\n        setShowRequestModal(value);\r\n    }\r\n\r\n    async function handleDeleteUser(){\r\n        console.log(`Delete user ${userToDelete}`);\r\n        setLoading(true);\r\n        const data = {\r\n            id: userToDelete\r\n        };\r\n\r\n        const response = await postDataAuthenticated(`/university-admins/profile/delete`,data);\r\n        if(response.statusCode === 200){\r\n            toast.success(\"User Deleted Successfully\");\r\n            await fetchUsers().then(users => {\r\n                setUsers(users);\r\n                setLoading(false);\r\n            });\r\n        }else{\r\n            setLoading(false);\r\n            if(response.statusCode === 403){\r\n                toast.error(\"You don't have permission to perform this action\");\r\n            }else{\r\n                toast.error(\"Cannot Delete User\");\r\n            }\r\n        }\r\n\r\n        setShowRequestModal(false);\r\n    }\r\n    \r\n    const columns = [\r\n        {\r\n            key: 'sr',\r\n            label: '#',\r\n            filter: false,\r\n            sorter: false,\r\n            _style: { width: '1%' }\r\n        },\r\n        {\r\n            key: 'name',\r\n            _style: { width: '20%' },\r\n        },\r\n        {\r\n            key: 'email',\r\n            _style: { width: '20%' },\r\n        },\r\n        { \r\n            key: 'group',\r\n            label: 'Group',\r\n            _style: { width: '20%' }\r\n        },\r\n        { \r\n            label: 'Status',\r\n            key: 'is_active',\r\n        _style: { width: '20%' }\r\n        },\r\n        {\r\n            key: 'show_details',\r\n            label: '',\r\n            _style: { width: '1%' },\r\n            filter: false,\r\n            sorter: false,\r\n        },\r\n    ]\r\n\r\n    async function fetchUsers(){\r\n        setLoading(true);\r\n        const response = await postDataAuthenticated(\"/university-admins/fetch\");\r\n        if(response.statusCode !== 200){\r\n            toast.error(\"Cannot Fetch Data\");\r\n            return [];\r\n        }else{\r\n            return response.data;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUsers().then(users => {\r\n            setUsers(users);\r\n            setLoading(false);\r\n        })\r\n    },[])\r\n// const usersData = [\r\n//   {\r\n//     id: 1,\r\n//     name: 'Samppa Nori',\r\n//     email: 'samppa.nori@example.com',\r\n//     avatar: '1.jpg',\r\n//     registered: '2022/01/01',\r\n//     group: 'Admin',\r\n//     status: 'Active',\r\n//   },\r\n// ]\r\nconst getBadge = (status) => {\r\n    if(status){\r\n        return 'success'\r\n    }\r\n    return 'danger'\r\n//   switch (status) {\r\n//     case 'Active':\r\n//       return 'success'\r\n//     case 'Inactive':\r\n//       return 'secondary'\r\n//     case 'Pending':\r\n//       return 'warning'\r\n//     case 'Banned':\r\n//       return 'danger'\r\n//     default:\r\n//       return 'primary'\r\n//   }\r\n}\r\nconst toggleDetails = (index) => {\r\n  const position = details.indexOf(index)\r\n  let newDetails = details.slice()\r\n  if (position !== -1) {\r\n    newDetails.splice(position, 1)\r\n  } else {\r\n    newDetails = [...details, index]\r\n  }\r\n  setDetails(newDetails)\r\n}\r\n\r\n\r\nreturn (\r\n    <div>\r\n    <AddUserModal show={showModal} handleClose={handleCloseModal} />\r\n    <ConfirmRequestModal title=\"Confirm Action\" show={showRequestModal} handleConfirm={() => handleDeleteUser()} handleClose={() => handleShowRequestModal(false,\"null\")}/>\r\n    <EditUserModal show={showEditModal} handleClose={handleCloseEditModal} user={editUser}/>\r\n    <CCard className=\"mb\">\r\n        <CCardBody>\r\n            <CRow>\r\n                <CCol sm={5}>\r\n                    <div>\r\n                        <h5><strong>Users</strong></h5>\r\n                    </div>\r\n                    {/* <div className=\"small text-medium-emphasis\">\r\n                        List of users\r\n                    </div> */}\r\n                </CCol>\r\n                <CCol sm={7} className=\"d-none d-md-block\">\r\n                    {/* <CButton color=\"primary\" className=\"float-end\">\r\n                        <i className=\"fas fa-download\" />\r\n                        Import\r\n                    </CButton> */}\r\n                    {\r\n                        canCreateUsers && (<CButton color=\"primary\" className=\"float-end\" style={{marginRight: '10px'}} onClick={() => handleShowModal(!showModal)}>\r\n                             <CIcon icon={cilUserPlus} className=\"text-light\"/>\r\n                             <span style={{ marginLeft: '5px', color:'white' }}>Add User</span>\r\n                            </CButton>)\r\n                    }\r\n                </CCol>\r\n            </CRow>\r\n        <CSmartTable\r\n            activePage={1}\r\n            cleaner\r\n            clickableRows\r\n            columns={columns}\r\n            columnFilter\r\n            columnSorter\r\n            // footer\r\n            loading={loading}\r\n            items={users}\r\n            itemsPerPageSelect\r\n            itemsPerPage={10}\r\n            pagination\r\n            onFilteredItemsChange={(items) => {\r\n                console.log(items)\r\n            }}\r\n            onSelectedItemsChange={(items) => {\r\n                console.log(items)\r\n            }}\r\n            scopedColumns={{\r\n                sr: (item, index) => (\r\n                    <td>\r\n                        {index + 1}\r\n                    </td>\r\n                ),\r\n                // avatar: (item) => (\r\n                //     <td>\r\n                //     <CAvatar src={`/images/avatars/${item.avatar}`} />\r\n                //     </td>\r\n                // ),\r\n                group: (item) => (\r\n                    <td>\r\n                        <p>{item.group.name}</p>\r\n                    </td>\r\n                ),\r\n            is_active: (item) => (\r\n                <td>\r\n                <h5><CBadge color={getBadge(item.is_active)}>{item.is_active ? 'Active': 'Inactive'}</CBadge></h5>\r\n                </td>\r\n            ),\r\n            show_details: (item) => {\r\n                return (\r\n                <td className=\"py-2\">\r\n                <CButton\r\n                    color=\"primary\"\r\n                    variant=\"outline\"\r\n                    shape=\"square\"\r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                        toggleDetails(item._id)\r\n                    }}>\r\n                {details.includes(item._id) ? 'Hide' : 'Show'}\r\n                </CButton>\r\n                </td>\r\n            )\r\n        },\r\n        details: (item) => {\r\n        return (\r\n          <CCollapse visible={details.includes(item._id)}>\r\n            <CCardBody className=\"p-3\">\r\n              {/* <h4>{item.username}</h4> */}\r\n              <p className=\"text-muted\">User since: {formatDate(item.created_date)}</p>\r\n\r\n              \r\n              <CButton size=\"sm\" color=\"info\" style={{marginRight:'10px'}} onClick={() => showEditRequestModal(!showEditModal,item)}>\r\n                Edit Profile\r\n              </CButton>\r\n              \r\n              <CButton size=\"sm\" color=\"danger\" className=\"ml-1\" onClick={() => handleShowRequestModal(!showRequestModal,item._id)}>\r\n                Delete\r\n              </CButton>\r\n            </CCardBody>\r\n          </CCollapse>\r\n        )\r\n      },\r\n    }}\r\n    sorterValue={{ column: 'status', state: 'asc' }}\r\n    tableFilter\r\n    tableProps={{\r\n      className: 'add-this-class',\r\n      responsive: true,\r\n      striped: true,\r\n      hover: true,\r\n    }}\r\n    tableBodyProps={{\r\n      className: 'align-middle'\r\n    }}/>\r\n    </CCardBody>\r\n    </CCard>\r\n    </div>    \r\n);\r\n\r\n}\r\n\r\nexport default Users\r\n","export var cilUserPlus = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M208,16A112.127,112.127,0,0,0,96,128v79.681a80.236,80.236,0,0,0,9.768,38.308l27.455,50.333L60.4,343.656A79.725,79.725,0,0,0,24,410.732V496H312V464H56V410.732a47.836,47.836,0,0,1,21.841-40.246l97.66-63.479-41.64-76.341A48.146,48.146,0,0,1,128,207.681V128a80,80,0,0,1,160,0v79.681a48.146,48.146,0,0,1-5.861,22.985L240.5,307.007,312,353.483V315.317l-29.223-19,27.455-50.334A80.23,80.23,0,0,0,320,207.681V128A112.127,112.127,0,0,0,208,16Z' class='ci-primary'/><polygon fill='var(--ci-primary-color, currentColor)' points='424 400 424 336 392 336 392 400 328 400 328 432 392 432 392 496 424 496 424 432 488 432 488 400 424 400' class='ci-primary'/>\"];\n"],"names":["_ref","show","handleClose","loading","setLoading","useState","userName","setUserName","isNameValid","setNameValid","isEmailValid","setEmailValid","isPasswordValid","setPasswordValid","isGroupValid","setGroupValid","selectedGroup","setSelectedGroup","password","setPassword","email","setEmail","options","setOptions","useEffect","async","response","postDataAuthenticated","statusCode","toast","error","data","fetchGroups","then","groups","opts","forEach","group","push","_jsx","value","_id","children","name","configureOptions","validateName","test","validateEmail","validatePassword","validateGroup","_jsxs","CModal","visible","onClose","size","CModalHeader","closeButton","CModalTitle","CModalBody","CForm","CInputGroup","className","CInputGroupText","id","CFormSelect","custom","onChange","event","target","valid","invalid","feedbackValid","feedbackInvalid","CFormInput","placeholder","required","type","autoComplete","CModalFooter","CButton","color","onClick","success","title","handleConfirm","user","isActive","setIsActive","console","log","is_active","style","display","alignItems","CFormSwitch","marginLeft","label","checked","reverse","Users","details","setDetails","showModal","setShowModal","showRequestModal","setShowRequestModal","showEditModal","setShowEditModal","users","setUsers","userToDelete","setUserToDelete","editUser","setEditUser","usersPermission","permissionStore","getPermissions","find","permission","canCreateUsers","create","handleShowRequestModal","fetchUsers","AddUserModal","arguments","length","undefined","ConfirmRequestModal","concat","handleDeleteUser","EditUserModal","CCard","CCardBody","CRow","CCol","sm","marginRight","CIcon","icon","cilUserPlus","CSmartTable","activePage","cleaner","clickableRows","columns","key","filter","sorter","_style","width","columnFilter","columnSorter","items","itemsPerPageSelect","itemsPerPage","pagination","onFilteredItemsChange","onSelectedItemsChange","scopedColumns","sr","item","index","CBadge","status","show_details","variant","shape","position","indexOf","newDetails","slice","splice","toggleDetails","includes","CCollapse","dateString","created_date","Date","toLocaleDateString","year","month","day","showEditRequestModal","sorterValue","column","state","tableFilter","tableProps","responsive","striped","hover","tableBodyProps"],"sourceRoot":""}